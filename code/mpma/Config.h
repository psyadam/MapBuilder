//!\file Config.h Configuration options for different parts of the framework.  Adjust the parameters in here to suite your application.
//See /docs/License.txt for details on how this code may be used.

#pragma once

// -- Define these to allow various portions of MPMA to compile.  You can disable portions you don't need in order to not take on their dependencies. --

//#define MPMA_COMPILE_AUDIO
#define MPMA_COMPILE_GEO
#define MPMA_COMPILE_GFXSETUP
#define MPMA_COMPILE_GFX //Requires: MPMA_COMPILE_GFXSETUP
#define MPMA_COMPILE_INPUT //Requires: MPMA_COMPILE_GFXSETUP
//#define MPMA_COMPILE_VR //Requires: MPMA_COMPILE_GFXSETUP, MPMA_COMPILE_GFX, MPMA_COMPILE_GEO
//#define MPMA_COMPILE_NET


// -- Profiler --

//!Enables or disables all use of MPMA's time profiler.
#define TIMEPROFILE_ENABLED


// -- Memory Manager --

#ifdef _DEBUG
    //!If defined, all memory allocations that use the MPMA memory manager will be tracked.
    #define MEMMAN_TRACING
#endif

//!If defined along with MEMMAN_TRACING, the call stack will be saved along with every allocation (big perf hit)
#define SAVE_ALLOC_CALL_STACK

//!If defined along with MEMMAN_TRACING, information about freed memory will be saved for later checks.  This essentially creates a leak since old information is never freed.
//#define MEM_TRACK_OLD_FREE


// -- Debug --

//!Toggle this to enable/disable whether calls to retrieve the call stack are ignored (walking the stack is not a cheap operation).
//!(windows-specific) This also adds references to StackWalk64 and other symbol functions, which require the dbghelp library.  See http://msdn2.microsoft.com/en-us/library/ms679294.aspx for details.
#define DEBUG_CALLSTACK_ENABLED

//!Toggle this off to disable all output to the reporter system
#define DEBUGROUTER_ENABLED

//!The amount of data a reporter can buffer before having to wait on its worker thread to catch up
#define DEBUGROUTER_BUFFER_SIZE (8*1024)


// -- Audio --

#ifdef _DEBUG
    //!If this is defined, white noise will be used as a sound source in error cases.  If it is not defined, silence will be used instead.
    #define USE_STATIC_SOUND_FOR_AUDIO_ERRORS
#endif

#ifdef _DEBUG
    //!If this is defined, any errors encountered during streaming are reported, the process of which might negatively impact other streaming operations.
    #define REPORT_AUDIO_STREAMING_PROBLEMS
#endif

//!If defined, audio buffer sizes will be increased when an underrun occurs.  This results in increased latency but may fix stuttering issues on sound systems with poor latency.
#define AUDIO_INCREASE_LATENCY_ON_UNDERRUN

//!If defined, the background sound threads will be run at a higher priority than normal
#define HIGHER_PRIORITY_SOUND_THREAD

//!If defined, the Ogg Vorbis audio source is compiled.  This adds a dependency on libvorbis.
//#define AUDIO_OGG_VORBIS_ENABLED

//!If defined, the Ogg Flac audio source is complied.  This adds a dependency on libflac.
//#define AUDIO_OGG_FLAC_ENABLED

//!If defined, the Ogg Opus audio source is compiled.  This adds a depedency on libopus.
//#define AUDIO_OGG_OPUS_ENABLED


// -- Graphics --

//!If defined, then the Extensions.h file will also declare and load a set of commonly used extensions.
#define OPENGL_LOAD_COMMON_EXTENSIONS

#ifdef _DEBUG
    //!If defined, MPMA calls to gtGetError will occur to verify certain operations, which can cause pipeline stalls.
    #define GFX_CHECK_FOR_ERRORS
#endif

//!If defined, all messages generated by the shader compiler will be reported to error output.  Otherwise only messages generated when a shader fails to compile are output.
#define GFX_REPORT_ALL_SHADER_MESSAGES

//!If defined, adds methods for loading images from files to the texture class.  This adds a dependency on libfreeimage.
#define GFX_USES_FREEIMAGE

//!If defined, enables the TextWriter class.  This adds a dependency on libfreetype.
#define GFX_USES_FREETYPE


// -- Input --

//!Enables support for joysticks and gamepads.  Note that other applications may not be able to use those devices while this application runs if this is enabled.  On Windows this adds a depedency on DirectInput.
#define ENABLE_GAME_DEVICE_INPUT

//!Default dead zone amount for input game devices (valid values are 0 through 1)
#define INPUT_GAMEDEVICE_DEFAULT_DEAD_ZONE 0.2f

//!Whether alt+enter should automatically toggle fullscreen mode
#define INPUT_ALT_ENTER_TOGGLES_FULLSCREEN


// -- Vr

//!Default to using an Hmd display device if present and possible when starting up graphics.  If not defined the default device is the default opengl adapter.
#define VR_DEFAULT_TO_HMD_DISPLAY
